{% if section.settings.product != blank %}
  {% assign product = all_products[section.settings.product] %}
{% else %}
  {% assign product = null %}
{% endif %}
{% if product %}
  {% assign form_id = 'product-form-' | append: product.id %}
{% endif %}

<section class="custom-product-info-section">
  {% if product %}
    <div
      class="custom-product-info-section__container"
    >
      <div class="product-layout">
        <div
          class="product-background-image"
          style="
            {% if section.settings.background_image %}
            background-image: url({{ section.settings.background_image | image_url }});
            {% endif %}
            background-size: cover;
            background-position: center;
          "
        ></div>
        <!-- Product Details Left Side -->
        <div class="product-details">
          <h1 class="product-title">{{ product.title }}</h1>

          <span class="price">{{ product.price | money_without_trailing_zeros }} USD</span>

          <div class="product-description">
            {{ product.description }}
          </div>

          <!-- Color Selector -->
          {% assign color_option = product.options_by_name.Color %}
          {% if color_option %}
            <div class="color-selector">
              <div class="color-option-label">COLOR</div>
              <div class="color-swatches">
                {% for variant_color in color_option.values %}
                  <div class="product-page-color-swatch-container">
                    <div class="product-page-color-swatch-tooltip">{{ variant_color }}</div>
                    <input
                      form="{{ form_id }}"
                      type="radio"
                      id="color-{{ variant_color | handleize }}"
                      name="options[Color]"
                      value="{{ variant_color }}"
                      data-variant-input
                      {% if forloop.first %}
                        checked
                      {% endif %}
                    >
                    <label
                      for="color-{{ variant_color | handleize }}"
                      class="product-page-color-swatch"
                      data-color="{{ variant_color }}"
                    ></label>
                  </div>
                {% endfor %}
              </div>
            </div>
          {% endif %}

          <!-- Size Selector -->
          {% assign size_option = product.options_by_name.Size %}
          {% if size_option %}
            <div class="size-selector">
              <div class="size-header">
                <div class="size-option-label">SIZE</div>
                <a href="#" class="size-guide">SIZE GUIDE</a>
              </div>
              <div class="size-options">
                {% for size in size_option.values %}
                  {% assign size_short = size %}
                  {% if size == 'Small' %}
                    {% assign size_short = 'S' %}
                  {% elsif size == 'Medium' %}
                    {% assign size_short = 'M' %}
                  {% elsif size == 'Large' %}
                    {% assign size_short = 'L' %}
                  {% elsif size == 'Extra Large' %}
                    {% assign size_short = 'XL' %}
                  {% elsif size == 'Extra Extra Large' %}
                    {% assign size_short = 'XXL' %}
                  {% endif %}
                  <input
                    form="{{ form_id }}"
                    type="radio"
                    id="size-{{ size | handleize }}"
                    name="options[Size]"
                    value="{{ size }}"
                    data-variant-input
                    {% if forloop.index == 2 %}
                      checked
                    {% endif %}
                  >
                  <label for="size-{{ size | handleize }}" class="size-option">{{ size_short }}</label>
                {% endfor %}
              </div>
            </div>
          {% endif %}

          <!-- Add to Cart Button -->
          {% form 'product', product, id: form_id, class: 'product-single__form' %}
            <input
              type="hidden"
              name="id"
              value="{{ product.selected_or_first_available_variant.id }}"
              data-product-select
            >
            <button type="submit" class="btn-add-to-cart" data-add-to-cart id="addToCartBtn">
              <span data-add-to-cart-text>ADD TO CART</span>
            </button>
          {% endform %}
        </div>
      </div>
    </div>
  {% else %}
    <div class="custom-product-info-section__placeholder">
      <p>Please select a product in the section settings to display product information.</p>
    </div>
  {% endif %}
</section>

<style>
  .custom-product-info-section__container {
    position: relative;
    min-height: 800px;
    font-family: 'Barlow', sans-serif !important;
  }

  .product-layout {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    align-items: center;
    min-height: 800px;
    position: relative;
  }

  .product-background-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
  }

  .product-details {
    width: 450px;
    height: 620px;
    background: rgba(255, 255, 255, 0.95);
    padding: 20px;
    box-shadow: 2px 2px 12px rgba(0, 0, 0, 0.1);
    border-radius: 2px;
    backdrop-filter: blur(10px);
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: space-between;
    gap: 16px;
    margin-left: 50px;
    z-index: 1;
  }

  .product-title {
    font-size: 24px;
    font-weight: 600;
    margin: 0px;
    line-height: 1.3;
    color: #000;
    letter-spacing: 0.05em;
  }

  .price {
    font-size: 18px;
    font-weight: 600;
    color: #000;
  }

  .product-description {
    line-height: 1.3;
    font-size: 13px;
    color: #333;
    font-weight: 400;
  }

  .color-option-label {
    font-size: 12px;
    font-weight: 600;
    letter-spacing: 0.05em;
    text-transform: uppercase;
    padding: 0px;
    margin: 0px;
    color: #000;
    margin-bottom: 6px;
  }

  .color-selector {
  }

  .color-swatches {
    display: flex;
    gap: 8px;
  }

  .color-swatches input[type='radio'] {
    display: none;
  }
  .size-selector {
  }

  .size-header {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 6px;
  }

  .size-option-label {
    font-size: 12px;
    font-weight: 600;
    letter-spacing: 0.05em;
    text-transform: uppercase;
    padding: 0px;
    margin: 0px;
    color: #000;
  }

  .size-guide {
    font-size: 12px;
    color: #000;
    text-decoration: underline;
    font-weight: 400;
  }
  .size-options {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    height: 40px;
    gap: 0px;
  }

  .size-options input[type='radio'] {
    display: none;
  }

  .size-option {
    height: 40px;
    flex-grow: 1;
    margin: 0px;
    padding: 12px 16px;
    border: 1px solid #ddd;
    background: #fff;
    font-size: 20px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    min-width: 48px;
    text-align: center;
  }

  .size-option:hover {
    border-color: #000;
  }

  .size-options input[type='radio']:checked + .size-option {
    background: var(--selected-color, #000);
    color: #fff;
    border-color: var(--selected-color, #000);
  }

  .btn-add-to-cart {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    padding: 16px 24px;
    color: #fff;
    border: none;
    font-size: 16px;
    font-weight: 600;
    letter-spacing: 0.1em;
    text-transform: uppercase;
    cursor: pointer;
    transition: all 0.3s ease;
    font-family: 'Barlow', sans-serif !important;
  }

  /* Mobile Responsiveness */
  @media (max-width: 768px) {
    .product-layout {
      flex-direction: column;
      min-height: auto;
    }

    .product-background-image {
      position: relative;
      min-height: 400px;
      width: 100%;
      order: 1;
    }

    .product-details {
      position: relative;
      width: 100%;
      height: 520px;
      background-color: white;
      margin: 0px;
      border-radius: 8px;
      order: 2;
      z-index: 1;
    }

    .product-title {
      font-size: 20px;
      font-weight: 600;
    }

    .custom-product-info-section__container {
      min-height: auto;
    }
  }

  /* Mobile Responsiveness */
  @media (max-width: 550px) {
    .product-details {
      height: 600px;
    }
  }
</style>

{% comment %}
  Used for the color swatches on the product page
{% endcomment %}
<style>
  .product-page-color-swatch-container {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
  }

  /* Tooltip Styles */
  .product-page-color-swatch-tooltip {
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    background-color: #666;
    color: white;
    padding: 4px 8px;
    border-radius: 2px;
    font-size: 12px;
    white-space: nowrap;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.2s ease, visibility 0.2s ease;
    margin-bottom: 8px;
    z-index: 10;
  }

  .product-page-color-swatch-tooltip::after {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    border: 5px solid transparent;
    border-top-color: #666;
  }

  .product-page-color-swatch-container:hover .product-page-color-swatch-tooltip {
    opacity: 1;
    visibility: visible;
  }

  .product-page-color-swatch {
    display: inline-block;
    width: 40px;
    height: 40px;
    text-decoration: none;
    border: 1px solid white;
    border-radius: 50%;
    background: transparent;
    transition: box-shadow 0.2s ease-in-out;
  }

  .product-page-color-swatch[data-color='White'],
  .product-page-color-swatch[data-color='Slate'] {
    border: 1px solid #ccc;
  }

  .product-page-color-swatch:hover {
    box-shadow: 0 0 0 2px rgba(0, 0, 0, 1);
  }

  .product-page-color-swatch[data-color='White']:hover,
  .product-page-color-swatch[data-color='Slate']:hover {
    box-shadow: 0 0 0 2px rgba(0, 0, 0, 1);
  }

  .product-page-color-swatch.active {
    box-shadow: 0 0 0 2px rgba(0, 0, 0, 1);
  }

  .product-page-color-swatch[data-color='White'].active,
  .product-page-color-swatch[data-color='Slate'].active {
    box-shadow: 0 0 0 2px rgba(0, 0, 0, 1);
  }
</style>

<script>
  // Color map will be loaded from centralized file
  const productVariants = {{ product.variants | json }};
  
  function getSelectedOptions() {
    const colorInput = document.querySelector('input[name="options[Color]"]:checked');
    const sizeInput = document.querySelector('input[name="options[Size]"]:checked');
    
    console.log(`colorInput: ${colorInput.value}`);
    console.log(`sizeInput: ${sizeInput.value}`);

    return {
      color: colorInput ? colorInput.value : null,
      size: sizeInput ? sizeInput.value : null
    };
  }

  function findVariantByOptions(color, size) {
    return productVariants.find(variant => {
      return variant.option1 === color && variant.option2 === size;
    });
  }

  function updateVariantId() {
    const options = getSelectedOptions();
    const variant = findVariantByOptions(options.color, options.size);
    const hiddenInput = document.querySelector('input[name="id"]');

    console.log(`variant: ${variant.id}`);
    console.log(`hiddenInput: ${hiddenInput}`);
    
    if (variant && hiddenInput) {
      hiddenInput.value = variant.id;
      
      // Update button state based on availability
      const addToCartBtn = document.querySelector('[data-add-to-cart]');
      const addToCartText = document.querySelector('[data-add-to-cart-text]');
      
      if (variant.available) {
        addToCartBtn.disabled = false;
        addToCartText.textContent = 'ADD TO CART';
        addToCartBtn.classList.remove('btn--sold-out');
      } else {
        addToCartBtn.disabled = true;
        addToCartText.textContent = 'SOLD OUT';
        addToCartBtn.classList.add('btn--sold-out');
      }
      
      // Update URL
      const url = new URL(window.location);
      url.searchParams.set('variant', variant.id);
      window.history.replaceState({}, '', url);
    }
  }

  function setActiveColorSwatch(color) {
    document.querySelectorAll('.product-page-color-swatch').forEach((swatch) => {
      swatch.classList.remove('active');
      if (swatch.dataset.color === color) {
        swatch.classList.add('active');
      }
    });
  }

  function initializeColorSwatches() {
    document.querySelectorAll('.product-page-color-swatch').forEach((swatch) => {
      const color = swatch.dataset.color;
      if (window.ColorMap && window.ColorMap[color]) {
        swatch.style.backgroundColor = window.ColorMap[color];
      }
    });
  }

  function updateColorStyles() {
    const options = getSelectedOptions();
    const variant = findVariantByOptions(options.color, options.size);
    const addToCartBtn = document.querySelector('.btn-add-to-cart');
    const sizeSelector = document.querySelector('.size-selector');
    
    if (variant && window.ColorMap && window.ColorMap[variant.option1]) {
      const selectedColor = window.ColorMap[variant.option1];
      const colorName = variant.option1;
      
      // For white and slate colors, use black instead
      let buttonColor = selectedColor;
      let sizeColor = selectedColor;
      
      if (colorName === 'White' || colorName === 'Slate') {
        buttonColor = '#000000';
        sizeColor = '#000000';
      }
      
      // Update button color
      addToCartBtn.style.backgroundColor = buttonColor;
      
      // Update size selector color using CSS custom property
      sizeSelector.style.setProperty('--selected-color', sizeColor);
    }
  }

  function initializeFromUrl() {
    const urlParams = new URLSearchParams(window.location.search);
    const variantId = urlParams.get('variant');
    
    if (variantId) {
      const variant = productVariants.find(v => v.id == variantId);
      if (variant) {
        // Select the matching color and size inputs
        const colorInput = document.querySelector(`input[name="options[Color]"][value="${variant.option1}"]`);
        const sizeInput = document.querySelector(`input[name="options[Size]"][value="${variant.option2}"]`);
        
        if (colorInput) colorInput.checked = true;
        if (sizeInput) sizeInput.checked = true;
        
        setActiveColorSwatch(variant.option1);
      }
    }
    
    updateVariantId();
  }

  document.addEventListener('DOMContentLoaded', function () {
    initializeColorSwatches();
    initializeFromUrl();
    updateColorStyles();
    
    // Add event listeners for option changes
    document.querySelectorAll('input[data-variant-input]').forEach(input => {
      input.addEventListener('change', function() {
        updateVariantId();
        updateColorStyles();
        
        // Update active color swatch when color changes
        if (this.name === 'options[Color]') {
          setActiveColorSwatch(this.value);
        }
      });
    });
  });
</script>

{% schema %}
{
  "name": "Product Info Section",
  "settings": [
    {
      "type": "header",
      "content": "Product Settings"
    },
    {
      "type": "product",
      "id": "product",
      "label": "Select Product"
    },
    {
      "type": "image_picker",
      "id": "background_image",
      "label": "Background Image",
      "info": "Select a background image for the product section"
    }
  ]
}
{% endschema %}
