{% comment %}
  Custom product section for AIRRAILâ„¢ 6" Performance Shorts
  Matches the design from assets/product page.png
{% endcomment %}

{% assign product = all_products['airrail-6-performance-shorts'] %}

<div
  class="custom-product-shorts"
>
  <div
    class="product-layout"
    style="
      background-image: url(https://cdn.shopify.com/s/files/1/0686/3988/3581/files/Group_20.png?v=1755394450);
      background-size: cover;
      background-position: center;
      width: 100%;
    "
  >
    <!-- Product Details Left Side -->
    <div class="product-details">
      <h1 class="product-title">{{ product.title }}</h1>

      <div class="product-price">
        <span class="price">{{ product.price | money_without_trailing_zeros }} USD</span>
      </div>

      <div class="product-description">
        {{ product.description }}
      </div>

      <!-- Color Selector -->
      {% assign color_option = product.options_by_name.Color %}
      {% if color_option %}
        <div class="color-selector">
          <div class="color-option-label">COLOR</div>
          <div class="color-swatches">
            {% for variant_color in color_option.values %}
              <div class="product-page-color-swatch-container">
                <div class="product-page-color-swatch-tooltip">{{ variant_color }}</div>
                <a
                  class="product-page-color-swatch"
                  data-color="{{ variant_color }}"
                >
                </a>
              </div>
              {% comment %}
                <input
                  type="radio"
                  id="color-{{ color | handleize }}"
                  name="color"
                  value="{{ color | handleize }}"
                  {% if forloop.first %}
                    checked
                  {% endif %}
                >
                <label
                  for="color-{{ color | handleize }}"
                  class="color-swatch color-{{ color | handleize }}"
                  data-color="{{ color | handleize }}"
                ></label>
              {% endcomment %}
            {% endfor %}
          </div>
        </div>
      {% endif %}

      <!-- Size Selector -->
      {% assign size_option = product.options_by_name.Size %}
      {% if size_option %}
        <div class="size-selector">
          <div class="size-header">
            <div class="size-option-label">SIZE</div>
            <a href="#" class="size-guide">SIZE GUIDE</a>
          </div>
          <div class="size-options">
            {% for size in size_option.values %}
              <input
                type="radio"
                id="size-{{ size | handleize }}"
                name="size"
                value="{{ size }}"
                {% if forloop.index == 2 %}
                  checked
                {% endif %}
              >
              <label for="size-{{ size | handleize }}" class="size-option">{{ size }}</label>
            {% endfor %}
          </div>
        </div>
      {% endif %}

      <!-- Add to Cart Button -->
      {% form 'product', product %}
        <input type="hidden" name="id" value="{{ product.selected_or_first_available_variant.id }}">
        <button type="submit" class="btn-add-to-cart" id="addToCartBtn">ADD TO CART</button>
      {% endform %}
    </div>
  </div>
</div>

<style>
  .custom-product-shorts {
    position: relative;
    min-height: 800px;
    font-family: 'Barlow', sans-serif !important;
  }

  .product-layout {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    align-items: center;
    min-height: 800px;
    position: relative;
  }

  .product-details {
    width: 450px;
    height: 650px;
    background: rgba(255, 255, 255, 0.95);
    padding: 20px;
    box-shadow: 2px 2px 12px rgba(0, 0, 0, 0.1);
    border-radius: 2px;
    backdrop-filter: blur(10px);
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: space-between;
    background-color: red;
    gap: 16px;
    margin-left: 70px;
    z-index: 1;
  }

  .product-title {
    font-size: 24px;
    font-weight: 600;
    margin: 0px;
    line-height: 1.3;
    color: #000;
    letter-spacing: 0.05em;
  }

  .product-price {
  }

  .price {
    font-size: 18px;
    font-weight: 600;
    color: #000;
  }

  .product-description {
    line-height: 1.4;
    font-size: 13px;
    color: #333;
    font-weight: 400;
  }

  .color-option-label {
    font-size: 12px;
    font-weight: 600;
    letter-spacing: 0.05em;
    text-transform: uppercase;
    padding: 0px;
    margin: 0px;
    color: #000;
    margin-bottom: 6px;
  }

  .color-selector {
  }

  .color-swatches {
    display: flex;
    gap: 8px;
  }

  .color-swatches input[type='radio'] {
    display: none;
  }

  .color-swatch {
    width: 28px;
    height: 28px;
    border-radius: 50%;
    border: 2px solid #fff;
    cursor: pointer;
    position: relative;
    transition: all 0.2s ease;
    box-shadow: 0 0 0 1px #ddd;
  }

  .color-swatches input[type='radio']:checked + .color-swatch {
    box-shadow: 0 0 0 2px #fff, 0 0 0 3px #000;
  }

  .size-selector {
  }

  .size-header {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 6px;
  }

  .size-option-label {
    font-size: 12px;
    font-weight: 600;
    letter-spacing: 0.05em;
    text-transform: uppercase;
    padding: 0px;
    margin: 0px;
    color: #000;
  }

  .size-guide {
    font-size: 12px;
    color: #000;
    text-decoration: underline;
    font-weight: 400;
  }
  .size-options {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
    gap: 0px;
  }

  .size-options input[type='radio'] {
    display: none;
  }

  .size-option {
    flex-grow: 1;
    padding: 12px 16px;
    border: 1px solid #ddd;
    background: #fff;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    min-width: 48px;
    text-align: center;
  }

  .size-option:hover {
    border-color: #000;
  }

  .size-options input[type='radio']:checked + .size-option {
    background: #000;
    color: #fff;
    border-color: #000;
  }

  .btn-add-to-cart {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    padding: 16px 24px;
    color: #fff;
    border: none;
    font-size: 16px;
    font-weight: 600;
    letter-spacing: 0.1em;
    text-transform: uppercase;
    cursor: pointer;
    transition: all 0.3s ease;
    font-family: 'Barlow', sans-serif !important;
  }

  /* Mobile Responsiveness */
  @media (max-width: 768px) {
    .product-layout {
      flex-direction: column;
      min-height: auto;
    }

    .product-details {
      width: 100%;
      margin: 20px;
      border-radius: 8px;
    }

    .custom-product-shorts {
      min-height: 600px;
    }

    .product-background-image {
      min-height: 600px;
    }
  }
</style>

<style>
  .product-page-color-swatch-container {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
    /* opacity: 0; */
    /* transform: translateY(20px);
    animation: cascadeIn 0.2s ease forwards; */
  }

  /* Tooltip Styles */
  .product-page-color-swatch-tooltip {
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    background-color: #666;
    color: white;
    padding: 4px 8px;
    border-radius: 2px;
    font-size: 12px;
    white-space: nowrap;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.2s ease, visibility 0.2s ease;
    margin-bottom: 8px;
    z-index: 10;
  }

  .product-page-color-swatch-tooltip::after {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    border: 5px solid transparent;
    border-top-color: #666;
  }

  .product-page-color-swatch-container:hover .product-page-color-swatch-tooltip {
    opacity: 1;
    visibility: visible;
  }

  .product-page-color-swatch {
    display: inline-block;
    width: 40px;
    height: 40px;
    text-decoration: none;
    border: 1px solid white;
    border-radius: 50%;
    background: transparent;
    transition: box-shadow 0.2s ease-in-out;
  }

  .product-page-color-swatch:hover {
    box-shadow: 0 0 0 1px rgba(0, 0, 0, 1);
  }

  .product-page-color-swatch.active {
    box-shadow: 0 0 0 1px rgba(0, 0, 0, 1);
  }
</style>

<script>
  // Color map will be loaded from centralized file

  const productVariants = {{ product.variants | json }};

  function getVariantIdFromUrl() {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get('variant');
  }

  function getVariantById(variantId) {
    const variant = productVariants.find(variant => variant.id == variantId);
    return variant;
  }

  function getVariantColor(variant) {
    if (!variant) return null;
    // Assuming color is the first option
    return variant.option1;
  }

  function setActiveColorSwatch(color) {
    document.querySelectorAll('.product-page-color-swatch').forEach((swatch) => {
      swatch.classList.remove('active');
      if (swatch.dataset.color === color) {
        swatch.classList.add('active');
      }
    });
  }

  function updateUrlWithVariant(variantId) {
    const url = new URL(window.location);
    url.searchParams.set('variant', variantId);
    window.history.pushState({}, '', url);
  }

  function getVariantByColor(color) {
    return productVariants.find(variant => variant.option1 === color);
  }

  function initializeColorSwatches() {
    document.querySelectorAll('.product-page-color-swatch').forEach((swatch) => {
      const color = swatch.dataset.color;
      if (window.ColorMap && window.ColorMap[color]) {
        swatch.style.backgroundColor = window.ColorMap[color];
      }

      // Add click handler for color swatch navigation
      swatch.addEventListener('click', function(e) {
        e.preventDefault();
        const selectedColor = this.dataset.color;
        const variant = getVariantByColor(selectedColor);

        if (variant) {
          const url = new URL(window.location);
          url.searchParams.set('variant', variant.id);
          window.location.href = url.toString();
        }
      });
    });

    // Set initial active swatch based on URL variant
    const variantId = getVariantIdFromUrl();
    if (variantId) {
      const variant = getVariantById(variantId);
      const color = getVariantColor(variant);
      if (color) {
        setActiveColorSwatch(color);
      }
    } else {
      // If no variant in URL, set first variant as active
      if (productVariants.length > 0) {
        const firstColor = getVariantColor(productVariants[0]);
        if (firstColor) {
          setActiveColorSwatch(firstColor);
          updateUrlWithVariant(productVariants[0].id);
        }
      }
    }
  }

  function initializeAddToCartButton() {
    const addToCartBtn = document.querySelector('.btn-add-to-cart');
    const variantId = getVariantIdFromUrl();
    const variant = getVariantById(variantId);
    if (variant) {
      addToCartBtn.style.backgroundColor = window.ColorMap[variant.option1];
    }
  }

  document.addEventListener('DOMContentLoaded', function () {
    initializeColorSwatches();
    initializeAddToCartButton();
  });
</script>

{% comment %}
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const productVariants = {{ product.variants | json }};
      const colorSwatches = document.querySelectorAll('.color-swatch');
      const sizeOptions = document.querySelectorAll('input[name="size"]');
      const addToCartBtn = document.getElementById('addToCartBtn');
      const variantIdInput = document.querySelector('input[name="id"]');

      let selectedColor = null;
      let selectedSize = null;

      // Initialize selected values
      const checkedColor = document.querySelector('input[name="color"]:checked');
      const checkedSize = document.querySelector('input[name="size"]:checked');

      if (checkedColor) selectedColor = checkedColor.value;
      if (checkedSize) selectedSize = checkedSize.value;

      // Color swatch functionality
      colorSwatches.forEach((swatch) => {
        swatch.addEventListener('click', function () {
          selectedColor = this.dataset.color;
          updateVariant();
          updateAddToCartColor(selectedColor);
        });
      });

      // Size option functionality
      sizeOptions.forEach((option) => {
        option.addEventListener('change', function () {
          selectedSize = this.value;
          updateVariant();
        });
      });

      function updateVariant() {
        if (!selectedColor || !selectedSize) return;

        const variant = productVariants.find(v => {
          return v.option1?.toLowerCase() === selectedColor && v.option2?.toLowerCase() === selectedSize.toLowerCase();
        });

        if (variant && variantIdInput) {
          variantIdInput.value = variant.id;

          // Update button based on availability
          if (variant.available) {
            addToCartBtn.disabled = false;
            addToCartBtn.textContent = 'ADD TO CART';
          } else {
            addToCartBtn.disabled = true;
            addToCartBtn.textContent = 'SOLD OUT';
          }
        }
      }

      function updateAddToCartColor(color) {
        const colorMap = {
          sage: '#a8c5a5',
          gray: '#8a8a8a',
          black: '#2c2c2c',
        };

        const defaultColor = '#a8c5a5';
        const buttonColor = colorMap[color] || defaultColor;

        addToCartBtn.style.backgroundColor = buttonColor;

        addToCartBtn.onmouseenter = function () {
          if (!this.disabled) {
            this.style.backgroundColor = hoverColor;
          }
        };

        addToCartBtn.onmouseleave = function () {
          this.style.backgroundColor = buttonColor;
        };
      }

      // Initialize
      updateVariant();
      updateAddToCartColor(selectedColor || 'sage');
    });
  </script>
{% endcomment %}

{% schema %}
{
  "name": "Custom Product Shorts",
  "settings": [
    {
      "type": "header",
      "content": "Product Settings"
    }
  ]
}
{% endschema %}
