{% comment %}
  Product Cell Component

  Parameters:
  - product_handle: Required - The handle of the product to display
  - extra_classes: Optional - Additional CSS classes for the cell
{% endcomment %}

{%- assign product = all_products[product_handle] -%}

<div
  class="product-cell {{ extra_classes }}"
  data-product-handle="{{ product.handle }}"
  data-default-variant="{{ product.selected_or_first_available_variant.id }}"
>
  <div class="product-image-container">
    <img
      src="{{ product.featured_image | image_url }}"
      alt="{{ product.title }}"
      class="product-image"
      width="400"
      height="600"
    >
    {% if product.images.size > 1 %}
      <img
        src="{{ product.images[1] | image_url }}"
        alt="Hover image"
        class="product-image-hover"
        width="400"
        height="600"
      >
    {% endif %}

    {% render 'color-swatches-component', product: product %}
  </div>

  <div class="product-info">
    <div class="collection-product-title">{{ product.title }}</div>
    <p class="product-price">{{ product.price | money_without_trailing_zeros }} USD</p>
  </div>
</div>

<style>
  .product-cell {
    text-align: left;
    position: relative;
    overflow: hidden;
    cursor: pointer;
    transition: transform 0.3s ease;
  }

  .product-cell:hover {
    transform: translateY(-4px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
  }

  .product-image {
    width: 100%;
    object-fit: cover;
    transition: opacity 0.3s ease;
  }

  .collection-product-title {
    padding: 0;
    padding-top: 4px;
    margin-bottom: 0;
    font-weight: 500;
    font-size: 14px;
  }

  .product-price {
    padding: 0;
    margin-bottom: 8px;
    font-size: 0.8rem;
    font-weight: 400;
  }

  .product-info {
    width: 100%;
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
    gap: 4px;
    padding-left: 5px;
  }

  .product-image-container {
    position: relative;
    overflow: hidden;
  }

  .product-image-hover {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .product-cell:hover .product-image-hover {
    opacity: 1;
  }
</style>

<script>
  (function () {
    // Initialize this specific product cell
    const productCell = document.currentScript.previousElementSibling.previousElementSibling;

    if (!productCell || !productCell.classList.contains('product-cell')) {
      // Find the product cell by working backwards from the script
      const allProductCells = document.querySelectorAll('.product-cell');
      const currentCell = allProductCells[allProductCells.length - 1];

      if (currentCell && !currentCell.dataset.initialized) {
        initializeProductCell(currentCell);
      }
    } else if (!productCell.dataset.initialized) {
      initializeProductCell(productCell);
    }

    function initializeProductCell(cell) {
      // Mark as initialized to prevent duplicate initialization
      cell.dataset.initialized = 'true';

      // Add click handler for navigation
      cell.addEventListener('click', function (e) {
        // Don't navigate if clicking on a color swatch (let the swatch handle navigation)
        if (e.target.closest('.color-swatch-custom')) {
          return;
        }

        const productHandle = this.dataset.productHandle;
        const defaultVariant = this.dataset.defaultVariant;
        if (productHandle) {
          // Use the theme utility function for consistent navigation
          if (window.theme && window.theme.navigateToProduct) {
            window.theme.navigateToProduct(productHandle, defaultVariant);
          } else {
            // Fallback if theme utilities are not available
            const url = defaultVariant
              ? `/products/${productHandle}?variant=${defaultVariant}`
              : `/products/${productHandle}`;
            window.location.href = url;
          }
        }
      });

      // Add hover event to trigger color swatch animations
      const colorSwatchContainers = cell.querySelectorAll('.color-swatch-container');

      cell.addEventListener('mouseenter', function () {
        // Reset animations
        colorSwatchContainers.forEach((container) => {
          container.style.animation = 'none';
          container.offsetHeight; // Trigger reflow
          container.style.animation = null;
        });
      });

      // Initialize color swatches for this cell
      const colorSwatches = cell.querySelectorAll('.color-swatch-custom');
      colorSwatches.forEach((swatch) => {
        const color = swatch.dataset.color;
        if (window.ColorMap && window.ColorMap[color]) {
          swatch.style.backgroundColor = window.ColorMap[color];
        }
      });
    }
  })();
</script>
